generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String     @id @default(cuid()) @map("id")
  name      String     @map("name")
  email     String     @unique @map("email")
  password  String     @map("password")
  status    UserStatus @default(ACTIVE) @map("status")
  role      UserRole   @default(USER) @map("role")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")

  appointments Appointment[]
  space        Space?
  Rating       Rating[]

  @@map("users")
}

model Space {
  id            String        @id @default(uuid()) @map("id")
  title         String        @map("title")
  description   String        @map("description")
  photos        String[]      @map("photos")
  hostId        String        @unique @map("host_id")
  host          User          @relation(fields: [hostId], references: [id])
  amenities     Amenity[]     @relation("space_amenities")
  rules         String        @map("rules")
  address       Address?
  geoLocation   GeoLocation?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  Rating        Rating[]
  appointments  Appointment[]
  averageRating Float         @default(0) @map("average_rating")

  @@map("spaces")
}

model Address {
  id      String  @id @default(uuid()) @map("id")
  street  String  @map("street")
  number  String  @map("number")
  city    String  @map("city")
  state   String  @map("state")
  zipCode String  @map("zip_code")
  space   Space?  @relation(fields: [spaceId], references: [id])
  spaceId String? @unique @map("space_id")

  @@map("addresses")
}

model GeoLocation {
  id        String  @id @default(uuid()) @map("id")
  latitude  Float   @map("latitude")
  longitude Float   @map("longitude")
  space     Space?  @relation(fields: [spaceId], references: [id])
  spaceId   String? @unique @map("space_id")

  @@map("geo_locations")
}

model Amenity {
  id     String  @id @default(uuid()) @map("id")
  name   String  @map("name")
  spaces Space[] @relation("space_amenities")

  @@map("amenities")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Appointment {
  id        String            @id @default(cuid()) @map("id")
  userId    String            @map("user_id")
  spaceId   String            @map("space_id")
  date      DateTime          @map("date")
  startTime DateTime          @map("start_time")
  endTime   DateTime          @map("end_time")
  status    AppointmentStatus @default(PENDING) @map("status")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  space Space @relation(fields: [spaceId], references: [id])

  @@map("appointments")
}

model Rating {
  id        String   @id @default(uuid()) @map("id")
  spaceId   String   @map("space_id")
  userId    String   @map("user_id")
  score     Int      @map("score")
  comment   String?  @map("comment")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  space Space @relation(fields: [spaceId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([spaceId, userId])
  @@map("ratings")
}
